// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  pk        String   @id @default(uuid())
  name      String
  lastName  String?
  email     String   @unique
  password  String
  role      Role?    @default(patient)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  idDocType IdType?
  idNumber  String?

  resetPassword ResetPassword[]
  patientData   PatientData[]
}

model ResetPassword {
  pk        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [pk], onDelete: Cascade)
  code      String   @unique
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  expiredAt DateTime
  userId    String
}

model PatientData {
  pk                    String    @id @default(uuid())
  user                  User      @relation(fields: [userId], references: [pk], onDelete: Cascade)
  userId                String    @unique
  dateOfBirth           DateTime
  sex                   Sex
  bloodType             BloodType
  country               String
  city                  String
  address               String
  phone                 String?
  emergencyContactName  String?
  emergencyContactPhone String?

  allergies         Allergy[]
  surgeries         Surgery[]
  chronicConditions ChronicCondition[]
  appointments      Appointment[]
  medications       Medication[]
  vaccines          Vaccine[]
}

model Allergy {
  pk            String          @id @default(uuid())
  name          String
  reaction      String
  severity      AllergySeverity
  notes         String?
  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())
  PatientData   PatientData?    @relation(fields: [patientDataPk], references: [pk], onDelete: Cascade)
  patientDataPk String?
}

model Appointment {
  pk              String       @id @default(uuid())
  reason          String?
  diagnosis       String?
  doctorName      String?
  appointmentDate DateTime
  notes           String?
  createdAt       DateTime     @default(now())
  PatientData     PatientData? @relation(fields: [patientDataPk], references: [pk], onDelete: Cascade)
  patientDataPk   String?
}

model ChronicCondition {
  pk            String       @id @default(uuid())
  name          String
  diagnosisDate DateTime?
  notes         String?
  createdAt     DateTime     @default(now())
  PatientData   PatientData? @relation(fields: [patientDataPk], references: [pk], onDelete: Cascade)
  patientDataPk String?
}

model Medication {
  pk            String       @id @default(uuid())
  name          String
  dosage        String
  frequency     String?
  startDate     DateTime?
  endDate       DateTime?
  notes         String?
  createdAt     DateTime     @default(now())
  PatientData   PatientData? @relation(fields: [patientDataPk], references: [pk], onDelete: Cascade)
  patientDataPk String?
}

model Surgery {
  pk            String       @id @default(uuid())
  name          String
  date          DateTime?
  notes         String?
  createdAt     DateTime     @default(now())
  PatientData   PatientData? @relation(fields: [patientDataPk], references: [pk], onDelete: Cascade)
  patientDataPk String?
}

model Vaccine {
  pk              String       @id @default(uuid())
  name            String
  doseNumber      Int
  vaccinationDate DateTime?
  notes           String?
  createdAt       DateTime     @default(now())
  PatientData     PatientData? @relation(fields: [patientDataPk], references: [pk], onDelete: Cascade)
  patientDataPk   String?
}

// Enums

enum Sex {
  M
  F
  O
}

enum BloodType {
  A_POS // A+
  A_NEG // A-
  B_POS // B+
  B_NEG // B-
  AB_POS // AB+
  AB_NEG // AB-
  O_POS // O+
  O_NEG // O-
}

enum AllergySeverity {
  Mild
  Moderate
  Severe
}

enum Role {
  admin
  doctor
  patient
}

enum IdType {
  IdenityCard
  DNI
}
